{"ast":null,"code":"//Used Master's serviceWorker as a reference\nconst isLocalHost = Boolean(window.location.hostname == \"localhost\" || window.location.hostname === \"[::1]\" || window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    const publicURL = new URL(process.env.PUBLIC_URL, window.location.href);\n\n    if (publicRUL.origin != window.location.origin) {\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const url = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalHost) {\n        isValid(url, config);\n        navigator.serviceWorker.ready();\n      } else {\n        registerValid(url, config);\n      }\n    });\n  }\n}\n\nfunction registerValid(url, config) {\n  navigator.serviceWorker.register(url).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n\n      if (installingWorker == null) {\n        return;\n      }\n    };\n\n    installingWorker.onstatechange = () => {\n      if (installingWorker.state == \"installed\") {\n        if (config && config.onUpdate) {\n          config.onUpdate(registration);\n        }\n      } else {\n        if (config && config.onSuccess) {\n          config.onSuccess(registration);\n        }\n      }\n    };\n  }).catch(err => {\n    console.log(`Error during service worker registration: ${err}`);\n  });\n}\n\nfunction isValid(url, config) {\n  fetch(url).then(res => {\n    const content = res.headers.get(\"content-type\");\n\n    if (res.status === 404 || content != null && content.indexOf(\"javascript\") === -1) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      registerValid(url, config);\n    }\n  }).catch(() => {\n    console.log(\"No internet connection. App is running offline.\");\n  });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","map":{"version":3,"sources":["C:/Users/danny/Desktop/Homework/Assignment_19/src/serviceWorker.js"],"names":["isLocalHost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","publicURL","URL","PUBLIC_URL","href","publicRUL","origin","addEventListener","url","isValid","serviceWorker","ready","registerValid","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","onUpdate","onSuccess","catch","err","console","log","fetch","res","content","headers","get","status","indexOf","unregister","reload"],"mappings":"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","sourcesContent":["\r\n\r\n//Used Master's serviceWorker as a reference\r\n\r\nconst isLocalHost = Boolean(\r\n    window.location.hostname == \"localhost\" || window.location.hostname === \"[::1]\" || window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\n\r\n\r\nexport function register(config){\r\n\r\n    if(process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator){\r\n        const publicURL = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if(publicRUL.origin != window.location.origin){\r\n            return;\r\n        }\r\n\r\n\r\n\r\n       window.addEventListener(\"load\", ()=>{\r\n            const url = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n            if(isLocalHost){\r\n                isValid(url, config);\r\n                navigator.serviceWorker.ready();\r\n            }else{\r\n                registerValid(url, config);\r\n             }\r\n        });\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nfunction registerValid(url, config){\r\n    navigator.serviceWorker\r\n        .register(url)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if(installingWorker == null){\r\n                    return;\r\n                }\r\n            }\r\n            installingWorker.onstatechange = () =>{\r\n                if(installingWorker.state == \"installed\"){\r\n                    if(config && config.onUpdate){\r\n                        config.onUpdate(registration);\r\n                    }\r\n                } else{\r\n                    if(config && config.onSuccess){\r\n                        config.onSuccess(registration);\r\n                    }\r\n                }\r\n            }\r\n        }).catch(err =>{\r\n            console.log(`Error during service worker registration: ${err}`);\r\n        });\r\n\r\n}\r\n\r\n\r\n\r\n\r\nfunction isValid(url, config){\r\n    fetch(url).then(res =>{\r\n        const content = res.headers.get(\"content-type\");\r\n\r\n        if(res.status === 404 || (content != null && content.indexOf(\"javascript\") === -1)){\r\n            navigator.serviceWorker.ready.then(registration =>{\r\n                registration.unregister().then( ()=> {\r\n                    window.location.reload();\r\n                });\r\n            });\r\n        } else {\r\n            registerValid(url, config);\r\n        }\r\n    }).catch( ()=>{\r\n        console.log(\"No internet connection. App is running offline.\");\r\n    });\r\n}\r\n\r\n\r\n\r\nexport function unregister(){\r\n    if(\"serviceWorker\" in navigator){\r\n        navigator.serviceWorker.ready.then(registration =>{\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}